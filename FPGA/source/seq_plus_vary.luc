module seq_plus_vary (
  input clk,  // clock
  input rst,  // reset
  output out[8]
  ) 

{
  
    
  dff register_1[8](#INIT(0), .clk(clk), .rst(rst));
  fsm y_controller(.clk(clk), .rst(rst)) = {S0, S1, S2, S3, S4, S5, S6, S7}; //used to store states - declare its clock and rest signals and states
  eight_bit_adder adder;
 
  always {
  adder.y = 8h00;
  adder.x = register_1.q;
  adder.cin = b0;
 
  
  case (y_controller.q){ //switches behaviour of FSM depending on current state produced by output at y_controller.q
    //define what the output should be at each state
   y_controller.S0:
        adder.y = 8h02;
        y_controller.d = y_controller.S1;
    y_controller.S1:
        adder.y = 8h04;
        y_controller.d = y_controller.S2;
    y_controller.S2:
        adder.y = 8h06;
        y_controller.d = y_controller.S3;
   y_controller.S3:
        adder.y = 8h08;
        y_controller.d = y_controller.S4;
   y_controller.S4:
        adder.y = 8h0A;
        y_controller.d = y_controller.S5;
   y_controller.S5:
        adder.y = 8h0C;
        y_controller.d = y_controller.S6;
   y_controller.S6:
        adder.y = 8h0E;
        y_controller.d = y_controller.S7;
   y_controller.S7:
        adder.y = 8h0F;
        y_controller.d = y_controller.S0;
  }
  adder.cin = b0;
  register_1.d = adder.s;
  out = adder.s;
  
  }
}